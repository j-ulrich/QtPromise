/*!

\page ownership Object Ownership and Smart Pointers

\brief This page describes the handling of object ownership/lifetime in the Qt Promise library.

Since the ownership of most objects of Qt Promise is shared between multiple objects,
the library uses %Qt's smart pointer class QSharedPointer to manage the lifetime of the objects.

This helps avoiding memory leaks and access violations especially with promise chaining because:
- intermediate promises could be created which would be annoying if needed to be deleted explicitly
- multiple promises could be created based on the same (shared) deferred
- all promises and deferreds in the chain need to exist as long as the last promise in
the chain is in use

Therefore, the promises hold QSharedPointers to the promises/deferreds they depend on.

\note Nevertheless, it is necessary to ensure that a QSharedPointer to the last promise
in the chain exists until the promise is resolved/rejected. Else the promise chain will
be destructed and the attached callbacks will not be executed.

### Object Deletion ###
Another thing to note is that the objects are deleted using QObject::deleteLater().
Therefore, the objects continue to exist until control returns to the event loop even
if their QSharedPointer goes out of scope. 

This also means that callbacks can be called even after QSharedPointer::clear() has been
called when the QObject::deleteLater() is handled after the resolved/rejected/notified signal
in the event loop.

*/